{#
/**
 * @file
 * Default theme implementation to display a paragraph in USWDS Paragraph Components.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  'paragraph--id--' ~ paragraph.id.value,
  'grid-container',
] %}

{% if content.field_column_grid_gap['#items'].getString() %}
  {% set grid_gap = ' grid-gap' %}
{% endif %}

{# Prints div with classes, and content without Width and Background. #}
<div{{ attributes.addClass(classes) }}>
  <div class="grid-row{{ grid_gap }}">

    {% set first_column_grid_class = [] %}
    {% set second_column_grid_class = [] %}

    {% for key, item in content.field_uswds_2_column_breakpoints|filter((v, k) => k|first != '#') -%}
      {% set values = content.field_uswds_2_column_breakpoints[key]['#paragraph'] %}
      {% set breakpoint = values.field_uswds_breakpoints.entity.name.value %}
      {% set column = values.field_2_column_grid_options.value|raw %}

      {% if breakpoint and column %}
        {% if breakpoint == 'mobile' %}
          {% set first_column_grid_class = first_column_grid_class|merge([
            '4-8' == column ? 'grid-col-4',
            '8-4' == column ? 'grid-col-8',
            '3-9' == column ? 'grid-col-3',
            '9-3' == column ? 'grid-col-9',
            'auto' == column ? 'grid-col-auto',
            'even' == column ? 'grid-col-6',
            '100' == column ? 'grid-col-12',
          ]) %}
        {% else %}
          {% set first_column_grid_class = first_column_grid_class|merge([
            '4-8' == column ? breakpoint ~ ':grid-col-4',
            '8-4' == column ? breakpoint ~ ':grid-col-8',
            '3-9' == column ? breakpoint ~ ':grid-col-3',
            '9-3' == column ? breakpoint ~ ':grid-col-9',
            'auto' == column ? breakpoint ~ ':grid-col-auto',
            'even' == column ? breakpoint ~ ':grid-col-6',
            '100' == column ? breakpoint ~ ':grid-col-12',
          ]) %}
        {% endif %}

        {% if breakpoint == 'mobile' %}
          {% set second_column_grid_class = second_column_grid_class|merge([
            '4-8' == column ? 'grid-col-8',
            '8-4' == column ? 'grid-col-4',
            '3-9' == column ? 'grid-col-9',
            '9-3' == column ? 'grid-col-3',
            'auto' == column ? 'grid-col-auto',
            'even' == column ? 'grid-col-6',
            '100' == column ? 'grid-col-12',
          ]) %}
        {% else %}
          {% set second_column_grid_class = second_column_grid_class|merge([
            '4-8' == column ? breakpoint ~ ':grid-col-8',
            '8-4' == column ? breakpoint ~ ':grid-col-4',
            '3-9' == column ? breakpoint ~ ':grid-col-9',
            '9-3' == column ? breakpoint ~ ':grid-col-3',
            'auto' == column ? breakpoint ~ ':grid-col-auto',
            'even' == column ? breakpoint ~ ':grid-col-6',
            '100' == column ? breakpoint ~ ':grid-col-12',
          ]) %}
        {% endif %}
      {% endif %}
    {% endfor %}

    {% if first_column_grid_class is empty %}
      {% set first_column_grid_class = first_column_grid_class|merge([
        'grid-col-6',
      ]) %}
    {% endif %}

    {% if second_column_grid_class is empty %}
      {% set second_column_grid_class = second_column_grid_class|merge([
        'grid-col-6',
      ]) %}
    {% endif %}

    {% for key, item in content.field_2_column_content|filter((v, k) => k|first != '#') -%}
      {% set column = content.field_2_column_content.0 %}

      {% if loop.index == 1 %}
        {% set column_attributes = create_attribute() %}
        <div{{ column_attributes.addClass(first_column_grid_class) }}>
          {{ item }}
        </div>

      {% elseif loop.index == 2 %}
        {% set column_attributes = create_attribute() %}
        <div{{ column_attributes.addClass(second_column_grid_class)}}>
          {{ item }}
        </div>
      {% endif %}
    {%- endfor -%}
  </div>
</div>
