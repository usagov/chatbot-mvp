<?php

/**
 * @file
 * Module contains functions related to usagov_benefit_finder_content.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function usagov_benefit_finder_content_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "node_bears_benefit_edit_form") {
    $i = 0;
    do {
      $ckey_widget = $form['field_b_eligibility']['widget'][$i]['subform']['field_b_criteria_key']['widget'];
      if (empty($ckey_widget)) {
        break;
      }
      $type = $ckey_widget['#type'];
      $required = $ckey_widget['#required'];
      if ($type == "select" && $required == 1) {
        $form['field_b_eligibility']['widget'][$i]['subform']['field_b_criteria_key']['widget']['#options'] =
          ['_none' => '- None -'] +
          $form['field_b_eligibility']['widget'][$i]['subform']['field_b_criteria_key']['widget']['#options'];
      }
      $i++;
    } while (TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function usagov_benefit_finder_content_form_node_bears_benefit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'usagov_benefit_finder_content_node_bears_benefit_edit_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function usagov_benefit_finder_content_form_node_bears_benefit_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'usagov_benefit_finder_content_node_bears_benefit_edit_form_validate';
}

/**
 * Validates benefit edit form benefit eligibility acceptable values.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function usagov_benefit_finder_content_node_bears_benefit_edit_form_validate(array $form, FormStateInterface $form_state) {
  $errors = [];
  $error_count = 0;

  $eligibilities = $form_state->getValue('field_b_eligibility');
  foreach ($eligibilities as $eligibility) {
    $criteria_nid = $eligibility['subform']['field_b_criteria_key'][0]['target_id'];
    if (empty($criteria_nid)) {
      continue;
    }
    $acceptable_values = array_column($eligibility['subform']['field_b_acceptable_values'], 'value');

    $criteria = Node::load($criteria_nid);
    $criteria_title = $criteria->get('title')->value;
    $criteria_type = $criteria->get('field_b_type')->getValue()[0]['value'];
    $criteria_values = array_column($criteria->get('field_b_values')->getValue(), 'value');

    if (!array_filter($acceptable_values)) {
      $errors[] = t("Criteria \"$criteria_title\" acceptable values is empty.");
    }

    if (in_array($criteria_type, ['Boolean', 'Radio', 'Select'])) {
      foreach ($acceptable_values as $value) {
        if (!empty($value) && !in_array($value, $criteria_values)) {
          $errors[] = t("Criteria \"$criteria_title\" acceptable value \"$value\" is not an option value.");
          $errors[] = t("--- Acceptable values from \"$criteria_title\" are: " . implode(', ', $criteria_values));
        }
      }
    }

    if (in_array($criteria_type, ['Date'])) {
      foreach ($acceptable_values as $value) {
        if (!empty($value)) {
          if (strpos($value, ' ') !== FALSE) {
            $errors[] = t("Criteria \"$criteria_title\" acceptable value \"$value\" cannot contain space.");
            continue;
          }
          $pattern = '/^(=|>|<|>=|<=)(\d{2}-\d{2}-\d{4}|\d{1,2}years)$/';
          if (preg_match($pattern, $value, $matches) === 1) {
            $secondPart = $matches[2];
            if (preg_match('/^\d{2}-\d{2}-\d{4}$/', $secondPart, $matches) === 1) {
              $dateTime = DateTime::createFromFormat('m-d-Y', $secondPart);
              if (!($dateTime && $dateTime->format('m-d-Y') === $secondPart)) {
                $errors[] = t("Criteria \"$criteria_title\" acceptable value \"$value\" date \"$secondPart\" is invalid.");
                $errors[] = t("--- Format: MM-DD-YYYY");
              }
            }
          }
          else {
            $errors[] = t("Criteria \"$criteria_title\" acceptable value \"$value\" is incorrect.");
            $errors[] = t("---The prefix must include only one of the following comparison operators: '>', '<', '=', '>=', or '<='.

--- The suffix must be formatted as either 'MM-DD-YYYY' or '(d or dd)years'.");
          }
        }
      }
    }
  }

  if (!empty($errors)) {
    foreach ($errors as $error) {
      $form_state->setErrorByName((string) ++$error_count, $error);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_agency_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = '_usagov_benefit_finder_content_agency_archived';
}

/**
 * It checks agency usage in benefits when an agency to be archived.
 * If still used, it lists the benefits and prevents the agency to be archived.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function _usagov_benefit_finder_content_agency_archived(array &$form, FormStateInterface $form_state) {
  $line = 0;
  $moderation_state = $form_state->getValue('moderation_state');
  $state_value = $moderation_state[0]['value'];
  if ($state_value == 'archived') {
    $result = _usagov_benefit_finder_content_check_agency_usage();
    if (!empty($result)) {
      $form_state->setErrorByName(++$line, t("This agency cannot be archived as it is still used in following benefits:"));
      foreach ($result as $row) {
        $form_state->setErrorByName(++$line, "$row[title] ($row[nid])");
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_agency_delete_form_alter(array &$form, FormStateInterface $form_state) {
  $return = _usagov_benefit_finder_content_check_agency_usage();
  if (!empty($return)) {
    $description = '';
    foreach ($return as $row) {
      $description .= "<li>$row[title] ($row[nid])</li>";
    }
    $description = '<div class="entity-skip">'
      . '<span>This agency cannot be deleted as it is still used in following benefits:</span>'
      . "<ul>$description</ul>"
      . '</div>';
    $form['description']['#markup'] = $description;
    $form['actions']['submit']['#access'] = FALSE;
  }
}

/**
 * It checks agency usage in benefits.
 * If still used, it returns array of node ID and title of these benefits.
 *
 * @return array
 *   An array containing node ID and title.
 */
function _usagov_benefit_finder_content_check_agency_usage() {
  $return = [];

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = $node->id();

  $connection = Database::getConnection();
  $query = $connection->select('node_field_data', 't1');
  $query->join('node__field_b_agency', 't2', 't1.nid = t2.entity_id');
  $query->fields('t1', ['title', 'nid']);
  $query->condition('t2.field_b_agency_target_id', $nid);
  $query->orderBy('title');
  $result = $query->execute();

  foreach ($result as $row) {
    $return[] = [
      'nid' => $row->nid,
      'title' => $row->title,
    ];
  }

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_criteria_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = '_usagov_benefit_finder_content_node_bears_criteria_edit_form_validate';
  $form['#validate'][] = '_usagov_benefit_finder_content_criteria_archived';
}

/**
 * It checks criteria usage in benefits and life event forms when a criteria to be archived.
 * If still used, it lists the benefits and life event forms and prevents the criteria to be archived.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function _usagov_benefit_finder_content_criteria_archived(array &$form, FormStateInterface $form_state) {
  $line = 0;
  $moderation_state = $form_state->getValue('moderation_state');
  $state_value = $moderation_state[0]['value'];
  if ($state_value == 'archived') {
    $result = _usagov_benefit_finder_content_check_criteria_usage();
    if (!empty($result)) {
      $form_state->setErrorByName(++$line, t("This criteria cannot be archived as it is still used in following contents:"));
      foreach ($result as $row) {
        $form_state->setErrorByName(++$line, "$row[type]: $row[title] ($row[nid])");
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_criteria_delete_form_alter(array &$form, FormStateInterface $form_state) {
  $return = _usagov_benefit_finder_content_check_criteria_usage();
  if (!empty($return)) {
    $description = '';
    foreach ($return as $row) {
      $description .= "<li>$row[type]: $row[title] ($row[nid])</li>";
    }
    $description = '<div class="entity-skip">'
      . '<span>This criteria cannot be deleted as it is still used in following contents:</span>'
      . "<ul>$description</ul>"
      . '</div>';
    $form['description']['#markup'] = $description;
    $form['actions']['submit']['#access'] = FALSE;
  }
}

/**
 * It checks criteria usage in benefits and life event forms.
 * If still used, it returns array of node ID and title of these benefits and life event forms.
 *
 * @return array
 *   An array containing node ID and title.
 */
function _usagov_benefit_finder_content_check_criteria_usage() {
  $return = [];

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = $node->id();

  $result = _usagov_benefit_finder_content_check_criteria_usage_in_life_event_form($nid);
  foreach ($result as $row) {
    $return[] = [
      'type' => 'Life event form',
      'nid' => $row['nid'],
      'title' => $row['title'],
    ];
  }

  $result = _usagov_benefit_finder_content_check_criteria_usage_in_benefit($nid);
  foreach ($result as $row) {
    $return[] = [
      'type' => 'Benefit',
      'nid' => $row['nid'],
      'title' => $row['title'],
    ];
  }

  return $return;
}

/**
 * It checks criteria usage in life event forms.
 *
 * @param int $nid
 *   Node ID of given criteria.
 */
function _usagov_benefit_finder_content_check_criteria_usage_in_life_event_form(int $nid) {
  $return = [];

  $connection = Database::getConnection();

  $query = $connection->select('paragraph__field_b_criteria_key', 't');
  $query->fields('t', ['entity_id']);
  $query->condition('t.bundle', 'b_levent_elg_criteria');
  $query->condition('t.field_b_criteria_key_target_id', $nid);
  $result = $query->execute();

  $entity_ids = [];
  foreach ($result as $row) {
    $entity_ids[] = $row->entity_id;
  }

  if (!empty($entity_ids)) {
    $first_level_entity_ids = [];
    do {
      $new_entity_ids = [];
      foreach ($entity_ids as $entity_id) {
        $query = $connection->select('paragraph__field_b_children', 't');
        $query->fields('t', ['entity_id']);
        $query->condition('t.bundle', 'b_levent_elg_criteria');
        $query->condition('t.field_b_children_target_id', $entity_id);
        $result = $query->execute()->fetchField();
        if ($result) {
          $new_entity_ids[] = $result;
        }
        else {
          $first_level_entity_ids[] = $entity_id;
        }
      }
      if (empty($new_entity_ids)) {
        break;
      }
      else {
        $entity_ids = $new_entity_ids;
      }
    } while (1);

    $query = $connection->select('node_field_data', 't1');
    $query->join('node__field_b_sections_elg_criteria', 't2', 't1.nid = t2.entity_id');
    $query->join('paragraph__field_b_criterias', 't3', 't2.field_b_sections_elg_criteria_target_id=  t3.entity_id');
    $query->fields('t1', ['title', 'nid']);
    $query->condition('t3.field_b_criterias_target_id', $first_level_entity_ids, 'IN');
    $query->orderBy('title');
    $result = $query->execute();

    foreach ($result as $row) {
      $return[] = ['nid' => $row->nid, 'title' => $row->title];
    }
  }

  return $return;
}

/**
 * It checks criteria usage in benefit.
 *
 * @param int $nid
 *   Node ID of given criteria.
 */
function _usagov_benefit_finder_content_check_criteria_usage_in_benefit(int $nid) {
  $return = [];

  $connection = Database::getConnection();

  $query = $connection->select('node_field_data', 't1');
  $query->join('node__field_b_eligibility', 't2', 't1.nid = t2.entity_id');
  $query->join('paragraph__field_b_criteria_key', 't3', 't2.field_b_eligibility_target_id = t3.entity_id');
  $query->fields('t1', ['title', 'nid']);
  $query->condition('t3.field_b_criteria_key_target_id', $nid);
  $query->orderBy('title');
  $result = $query->execute();

  foreach ($result as $row) {
    $return[] = ['nid' => $row->nid, 'title' => $row->title];
  }

  return $return;
}

/**
 * Validates criteria edit form hasChild field.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function _usagov_benefit_finder_content_node_bears_criteria_edit_form_validate(array $form, FormStateInterface $form_state) {
  $errors = [];
  $error_count = 0;

  $has_child = $form_state->getValue('field_b_has_child');

  if ($has_child['value']) {
    return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = $node->id();

  $result = _usagov_benefit_finder_content_check_criteria_has_child($nid);
  if (!empty($result)) {
    foreach ($result as $row) {
      $errors[] = t("Can not uncheck \"Has Child\" field. There are related child values in the Life event form: $row[title] ($row[nid])");
    }
  }

  if (!empty($errors)) {
    foreach ($errors as $error) {
      $form_state->setErrorByName((string) ++$error_count, $error);
    }
  }
}

/**
 * It checks if criteria has child.
 *
 * @param int $nid
 *   Node ID of given criteria.
 */
function _usagov_benefit_finder_content_check_criteria_has_child(int $nid) {
  $return = [];

  $connection = Database::getConnection();

  $query = $connection->select('paragraph__field_b_children', 't');
  $query->fields('t', ['entity_id']);
  $query->condition('t.bundle', 'b_levent_elg_criteria');
  $result = $query->execute();

  $entity_ids = [];
  foreach ($result as $row) {
    $entity_ids[] = $row->entity_id;
  }

  if (empty($entity_ids)) {
    return $return;
  }

  $query = $connection->select('node_field_data', 't1');
  $query->join('node__field_b_sections_elg_criteria', 't2', 't1.nid = t2.entity_id');
  $query->join('paragraph__field_b_criterias', 't3', 't2.field_b_sections_elg_criteria_target_id =  t3.entity_id');
  $query->join('paragraph__field_b_criteria_key', 't4', 't3.field_b_criterias_target_id =  t4.entity_id');
  $query->fields('t1', ['title', 'nid']);
  $query->condition('t4.field_b_criteria_key_target_id', $nid);
  $query->condition('t3.field_b_criterias_target_id', $entity_ids, 'IN');
  $query->orderBy('title');
  $result = $query->execute();

  foreach ($result as $row) {
    $return[] = ['nid' => $row->nid, 'title' => $row->title];
  }

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_life_event_form_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = '_usagov_benefit_finder_content_life_event_form_archived';
  $form['#validate'][] = '_usagov_benefit_finder_content_check_life_event_form_criteria_depth';
}

/**
 * It checks criteria depth of life event form.
 * If criteria depth greater than 1, it gives error message and lists of the criteria.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function _usagov_benefit_finder_content_check_life_event_form_criteria_depth(array &$form, FormStateInterface $form_state) {
  $error_flag = FALSE;
  $criteria_depths = [];
  $life_event_form_node = NULL;

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();
    if ($entity instanceof NodeInterface) {
      $life_event_form_node = $entity;
    }
  }

  $sections = $life_event_form_node->get('field_b_sections_elg_criteria')->referencedEntities();

  foreach ($sections as $section) {
    $criterias = $section->get('field_b_criterias')->referencedEntities();

    foreach ($criterias as $criteria) {
      $criteria_fieldset = _usagov_benefit_finder_content_find_life_event_form_criteria_depth($criteria, 0);

      foreach ($criteria_fieldset as $record) {
        if ($record['depth'] > 1) {
          $error_flag = TRUE;
        }
        $criteria_depths[] = $record;
      }
    }
  }

  if ($error_flag) {
    $line = 0;
    $form_state->setErrorByName(++$line, t("Benefit Finder V1 only supports one level nested criteria (depth <= 1)."));
    foreach ($criteria_depths as $record) {
      if ($record['depth'] > 1) {
        $form_state->setErrorByName(++$line, "$record[criteriaKey]  (depth=$record[depth])");
      }
    }
  }
}

/**
 * It finds criteria depth of life event form.
 *
 * @param $criteria
 *   The criteria
 * @param $depth
 *   The depth
 * @return array
 *   An array containing criteria key and depth.
 */
function _usagov_benefit_finder_content_find_life_event_form_criteria_depth($criteria, $depth) {
  $criteria_fieldset = [];

  $criteria_fieldset[] = [
    "criteriaKey" => current($criteria->get('field_b_criteria_key')->referencedEntities())->get('field_b_id')->value,
    "depth" => $depth,
  ];

  $criterias_1 = $criteria->get('field_b_children')->referencedEntities();
  if (!empty($criterias_1)) {
    $depth++;
    foreach ($criterias_1 as $criteria_1) {
      $results = _usagov_benefit_finder_content_find_life_event_form_criteria_depth($criteria_1, $depth);
      foreach ($results as $result) {
        $criteria_fieldset[] = $result;
      }
    }
  }

  return $criteria_fieldset;
}

/**
 * It checks life event form usage in relevant benefit of life event forms.
 * If still used, it returns array of node ID and title of these life event forms.
 *
 * @param array $form
 *   Form array.
 * @param FormStateInterface $form_state
 *   Form state object.
 */
function _usagov_benefit_finder_content_life_event_form_archived(array &$form, FormStateInterface $form_state) {
  $line = 0;
  $moderation_state = $form_state->getValue('moderation_state');
  $state_value = $moderation_state[0]['value'];
  if ($state_value == 'archived') {
    $result = _usagov_benefit_finder_content_check_life_event_form_usage();
    if (!empty($result)) {
      $form_state->setErrorByName(++$line, t("This life event form cannot be archived as it is still used in following contents:"));
      foreach ($result as $row) {
        $form_state->setErrorByName(++$line, "Life event form: $row[title] ($row[nid])");
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_life_event_form_delete_form_alter(array &$form, FormStateInterface $form_state) {
  $return = _usagov_benefit_finder_content_check_life_event_form_usage();
  if (!empty($return)) {
    $description = '';
    foreach ($return as $row) {
      $description .= "<li>Life event form: $row[title] ($row[nid])</li>";
    }
    $description = '<div class="entity-skip">'
      . '<span>This life event form cannot be deleted as it is still used in following content:</span>'
      . "<ul>$description</ul>"
      . '</div>';
    $form['description']['#markup'] = t($description);
    $form['actions']['submit']['#access'] = FALSE;
  }
}

/**
 * It checks life event form usage in relevant benefit of life event forms.
 * If still used, it returns array of node ID and title of these life event forms.
 *
 * @return array
 *   An array containing node ID and title.
 */
function _usagov_benefit_finder_content_check_life_event_form_usage() {
  $return = [];

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = $node->id();

  $result = _usagov_benefit_finder_content_check_life_event_form_usage_in_life_event_form($nid);
  foreach ($result as $row) {
    $return[] = [
      'nid' => $row['nid'],
      'title' => $row['title'],
    ];
  }

  return $return;
}

/**
 * It checks life event form usage in relevant benefit of life event forms.
 *
 * @param int $nid
 *   Node ID of given life event form.
 */
function _usagov_benefit_finder_content_check_life_event_form_usage_in_life_event_form(int $nid) {
  $return = [];

  $connection = Database::getConnection();

  $query = $connection->select('paragraph__field_b_life_event_form', 't');
  $query->fields('t', ['entity_id']);
  $query->condition('t.bundle', 'b_levent_relevant_benefit');
  $query->condition('t.field_b_life_event_form_target_id', $nid);
  $result = $query->execute();

  $entity_ids = [];
  foreach ($result as $row) {
    $entity_ids[] = $row->entity_id;
  }

  if (empty($entity_ids)) {
    return $return;
  }

  $query = $connection->select('node_field_data', 't1');
  $query->join('node__field_b_relevant_benefits', 't2', 't1.nid = t2.entity_id');
  $query->fields('t1', ['title', 'nid']);
  $query->condition('t2.field_b_relevant_benefits_target_id', $entity_ids, 'IN');
  $query->orderBy('title');
  $result = $query->execute();

  foreach ($result as $row) {
    $return[] = ['nid' => $row->nid, 'title' => $row->title];
  }

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function usagov_benefit_finder_content_form_node_bears_benefit_delete_form_alter(array &$form, FormStateInterface $form_state) {
  _usagov_benefit_finder_content_check_benefit_usage($form);
}

/**
 * It checks benefit usage in life event forms and lists the life event forms.
 *
 * @param array $form
 *   Form array.
 */
function _usagov_benefit_finder_content_check_benefit_usage(array &$form) {
  $description = '';

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = $node->id();

  $result = _usagov_benefit_finder_content_check_benefit_usage_in_life_event_form($nid);
  foreach ($result as $row) {
    $description .= "<li>Life event form: $row[title] ($row[nid])</li>";
  }

  if (!empty($description)) {
    $description = '<div class="entity-skip">'
      . '<span>This benefit is used in following content:</span>'
      . "<ul>$description</ul>"
      . '</div>';
    $form['description']['#markup'] = t($description);
  }
}

/**
 * It checks benefit usage in life event form.
 *
 * @param int $nid
 *   Node ID of given benefit.
 * @return array
 *   An array of Node ID and title of life event forms.
 */
function _usagov_benefit_finder_content_check_benefit_usage_in_life_event_form(int $nid) {
  $return = [];

  $connection = Database::getConnection();

  $query = $connection->select('node_field_data', 't1');
  $query->join('node__field_b_life_event_forms', 't2', 't1.nid = t2.field_b_life_event_forms_target_id');
  $query->fields('t1', ['title', 'nid']);
  $query->condition('t2.entity_id', $nid);
  $query->orderBy('title');
  $result = $query->execute();

  foreach ($result as $row) {
    $return[] = ['nid' => $row->nid, 'title' => $row->title];
  }

  return $return;
}
