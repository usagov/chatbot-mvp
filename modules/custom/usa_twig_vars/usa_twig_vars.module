<?php

/**
 * @file
 * Use proprocess for html twig.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\path_alias\PathAliasInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\usa_twig_vars\Event\DatalayerAlterEvent;
use Drupal\usa_twig_vars\Paragraphs\ChatLabels;
use Drupal\usa_twig_vars\Paragraphs\ElectedOfficialsLabels;
use Drupal\usa_twig_vars\Paragraphs\SiteIssueReportLabels;
use Drupal\usa_twig_vars\TaxonomyDatalayerBuilder;

/**
 * Implements hook_preprocess()
 *
 * @param mixed $variables
 *   Self described.
 * @param mixed $hook
 *   Self described.
 */
function usa_twig_vars_preprocess(&$variables, $hook): void {
  if ($hook === 'html' || $hook === 'page') {
    $usa_twig_vars = &drupal_static(__FUNCTION__);
    if (!isset($usa_twig_vars)) {
      /* pre-populate $usa_twig_vars so we can rely on certain
      fields being present:*/
      $usa_twig_vars = [
        'id' => NULL,
        'front' => 'not_homepage',
        'nodetype' => NULL,
        'pagetype' => NULL,
        'meta_noindex' => NULL,
        'datalayer' => NULL,
      ];
      $node = \Drupal::routeMatch()->getParameter('node');
      $isFront = \Drupal::service('path.matcher')->isFrontPage();
      $noindex = FALSE;

      if (is_object($node) && method_exists($node, 'getFields')) {

        // Check node has all the four variables set which must not be null.
        $node_real_type = $node->getType();
        if ($node->id() != NULL && $node_real_type != NULL) {
          // Check for special nodes by path:
          switch ($node->toUrl()->toString()) {
            case '/agency-index':
            case '/es/indice-agencias':
              // Don't index beyond first page.
              $current_letter = \Drupal::request()->query->get('letter') ?: 'a';
              if ($current_letter != 'a') {
                $noindex = TRUE;
              }
              break;
          }

          if ($node->getType() === 'wizard_step') {
            $noindex = TRUE;
          }

          if (($node->getType() === 'directory_record') && $node->hasField('field_acronym')) {
            if ($acronym = $node->get('field_acronym')->value) {
              $usa_twig_vars['head_title'] = $variables['head_title'];
              $usa_twig_vars['head_title']['title'] = Markup::create(trim(strip_tags($variables['page']['#title'])) .
                  " (" . trim(strip_tags($acronym)) . ")");
            }
          }

          $pageType = usa_twig_vars_get_page_type($node);

          // Data to be sent to GTM.
          $datalayer = new TaxonomyDatalayerBuilder(
            routeMatch: \Drupal::routeMatch(),
            breadcrumbManager: \Drupal::service('breadcrumb'),
            node: $node,
            isFront: $isFront,
            basicPagesubType: $pageType ?? NULL,
          );

          $usa_twig_vars['datalayer'] = $datalayer->build();
          unset($isFront);

          // Cleanup vars.
          // Promote variables figured out via datalayer builder that
          // we initialized earlier.
          // Need to get them from the array return after build() above.
          $usa_twig_vars['id'] = $node->id();
          $usa_twig_vars['nodetype'] = $usa_twig_vars['datalayer']['contentType'];
          $usa_twig_vars['pagetype'] = $usa_twig_vars['datalayer']['basicPagesubType'];
          $usa_twig_vars['front'] = $usa_twig_vars['datalayer']['homepageTest'];
          $usa_twig_vars['meta_description'] = usa_twig_vars_get_meta_description($node);
          $usa_twig_vars['meta_noindex'] = $noindex;
        }
      }

      // Let other modules add to the datalayer payload.
      $datalayerEvent = new DatalayerAlterEvent($usa_twig_vars['datalayer'] ?? []);
      $dispatcher = \Drupal::service('event_dispatcher');
      $dispatcher->dispatch($datalayerEvent, DatalayerAlterEvent::EVENT_NAME);
      // Get any alterations.
      $usa_twig_vars['datalayer'] = $datalayerEvent->datalayer;
    }

    foreach ($usa_twig_vars as $key => $value) {
      $variables[$key] = $value;
    }
  }
}

/**
 * Hide menu items with page type set to Standard Page - Nav Hidden.
 *
 * @todo Check if this menu/hook is used anywhere
 * @param array<string, mixed> $variables
 */
function usa_twig_vars_preprocess_menu__sidebar_first(array &$variables, string $hook): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node) && method_exists($node, 'getFields')) {
    $variables['pagetype'] = usa_twig_vars_get_page_type($node);
  }
}

/**
 * Return the $page_type.
 */
function usa_twig_vars_get_page_type(NodeInterface &$node): ?string {
  $fields = $node->getFields();
  if (array_key_exists('field_page_type', $fields)
      && $fields['field_page_type'] != NULL
      && !empty($fields['field_page_type']->getValue())
      && $fields['field_page_type']->getValue()[0]['target_id'] != NULL) {
    $term_id = $fields['field_page_type']->getValue()[0]['target_id'];
    $term = Term::load($term_id);
    $page_type = $term ? $term->get('name')->value : '';
    return $page_type ?: 'content_page';
  }

  return NULL;
}

/**
 * Get a string for the <meta description> tag, as entered in the CMS.
 *
 * Attempt to get text from field_meta_description, and if that is absent or
 * does not contain text, from field_page_intro (which will be the more common
 * case). Returns the meta description or NULL if there is none.
 */
function usa_twig_vars_get_meta_description(NodeInterface &$node): ?string {
  $fields = $node->getFields();
  foreach (['field_meta_description', 'field_page_intro'] as $field_name) {
    if (array_key_exists($field_name, $fields) && ($fields[$field_name] != NULL) && $fields[$field_name]->value) {
      $value = trim($fields[$field_name]->value);
      if (strlen($value) > 0) {
        return $value;
      }
    }
  }
  return NULL;
}

/**
 * Remove field_page_intro content if field_hide_page_intro is set to TRUE.
 *
 * @param mixed $variables
 *   Self described.
 */
function usa_twig_vars_preprocess_field__node__field_page_intro(&$variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  // Check if field_hide_page_intro is True
  // the set the value of the content to empty string
  // but the fields content exist.
  if (is_object($node) && method_exists($node, 'getFields')) {
    $fields = $node->getFields();
    if (array_key_exists('field_hide_page_intro', $fields) && ($fields['field_hide_page_intro'] != NULL)
        && !empty($fields['field_hide_page_intro']->getValue())
        && ($fields['field_hide_page_intro']->getValue()[0]['value'] != NULL)
        && ($fields['field_hide_page_intro']->getValue()[0]['value'] == TRUE)) {
      $variables['items'][0]['content']['#context']['value'] = '';
    }
  }
}

/**
 * Preprocess title for Federal Agency pages.
 *
 * @param array<string, mixed> $variables
 */
function usa_twig_vars_preprocess_page_title(array &$variables, string $hook): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node) && method_exists($node, 'getFields')) {
    if (($node->getType() == 'directory_record') && $node->hasField('field_acronym')) {
      if ($acronym = $node->get('field_acronym')->value) {
        $variables['title_suffix']['#markup'] = '(' . $acronym . ')';
      }
    }
  }
}

/**
 * Add context to the federal_agencies view.
 *
 * Allow us to show the current letter, and add links to the "next" and
 * "previous" letters. Note that the _summary preprocess hook runs first (at
 * least for this view) and populates a static variable with the list of
 * possible letters, which the _list preprocess hook needs in order to figure
 * out prev/next.
 *
 * @param array<string, mixed> $variables
 * @param array<string, mixed> $info
 */
function usa_twig_vars_preprocess_views_view_summary__federal_agencies(array &$variables, string $hook, array $info): void {
  $our_unique_name = 'usa_twig_vars_preprocess_view_federal_agencies';
  drupal_static_reset($our_unique_name);
  $shared = &drupal_static($our_unique_name);
  $shared = [];

  // Letters are the title_truncated in the rows of the view's "result."
  // At this point the current letter is available only via the Request object.
  // (The core view summary doesn't use the current letter, but we do.)
  $view = $variables['view'];
  $rows = $view->result;
  $letters = [];
  foreach ($rows as $row) {
    $letters[] = $row->title_truncated;
  }
  $current_letter = $view->getRequest()->query->get('letter') ?: 'a';
  $current_letter = mb_strtoupper($current_letter);
  $shared['current'] = $current_letter;

  // Figure out next and previous letters.
  $cur_idx = array_search($current_letter, $letters);
  $next_idx = $cur_idx + 1;
  $prev_idx = $cur_idx - 1;
  if ($next_idx > array_key_last($letters)) {
    $next_idx = array_key_first($letters);
  }
  if ($prev_idx < array_key_first($letters)) {
    $prev_idx = array_key_last($letters);
  }
  $shared['next'] = $letters[$next_idx];
  $shared['prev'] = $letters[$prev_idx];

  $variables['alpha_context'] = $shared;
}

/**
 * Add context to the federal_agencies view.
 *
 * Allow us to show the current letter, and add links to the "next" and
 * "previous" letters.
 *
 * @param array<string, mixed> $variables
 * @param array<string, mixed> $info
 */
function usa_twig_vars_preprocess_views_view_list__federal_agencies(array &$variables, string $hook, array $info): void {
  $alpha_context = &drupal_static('usa_twig_vars_preprocess_view_federal_agencies');
  $variables['alpha_context'] = $alpha_context;
}

/**
 * Create an array called `site_banners` that contains all the site banners.
 *
 * The value of each element in this array can be the id of the site banner
 * if the checkbox `place_above_header` is checked or `null` if the checkbox
 * is not checked.
 *
 * @param array<string, mixed> $variables
 */
function usa_twig_vars_preprocess_region(array &$variables): void {

  // Check if we are in the `header_top` region.
  if ($variables['region'] === 'header_top') {

    $site_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // Get all site_banners from the website.
    $site_banners_blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['type' => 'site_banner']);
    if ($site_banners_blocks) {

      foreach ($site_banners_blocks as $site_banner) {
        /*
         * Check if the language of the banner is the same as the website.
         * This prevents incorrect language banners from being displayed on the
         * site.
         */
        $site_banner_lang = $site_banner->langcode->value;
        if ($site_banner_lang === $site_language) {
          // Get the value of the checkbox in the site_banner form.
          $place_above_header = $site_banner->field_place_above_header->value;

          // Check if the checkbox in the site_banner form is checked or not.
          if ($place_above_header) {
            /* Set the value to the site_banner id to add the site_banner to the
            `header_top` region.*/
            $variables['site_banners'][$site_banner->id()] = $site_banner->id();
          }
          else {
            /* Set the value to null to remove the site_banner with id
            `$site_banner->id()` from the region `header_top`. */
            $variables['site_banners'][$site_banner->id()] = NULL;
          }
        }

      }
    }
    // Get all modals from the website.
    $modal_blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['type' => 'modal']);
    foreach ($modal_blocks as $modal) {
      /*
       * Check if the language of the modal is the same as the website.
       * This prevents incorrect language modals from being displayed on the
       * site.
       */
      $modal_lang = $modal->langcode->value;
      if ($modal_lang === $site_language) {
        $variables['modals'][$modal->id()] = [
          "name" => $modal->field_modal_id->value,
          "id" => $modal->field_modal[0]->getValue(),
        ];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param array<string, mixed> $form
 */
function usa_twig_vars_form_alter(array &$form, FormStateInterface &$form_state, string $form_id): void {
  $form['#after_build'][] = 'usa_twig_vars_after_build';
}

/**
 * Custom after build function.
 *
 * @param array<string, mixed> $form
 * @return array<string, mixed>
 */
function usa_twig_vars_after_build(array $form, FormStateInterface &$form_state): array {
  /* Unchecks Generate automatic URL alias if path exists, if NOT home page
  in_array returns true unless strict mode is turned on but strict mode returns
  false on other pages where the key is found.
   */
  if (array_key_exists('field_page_type', $form_state->getValues())) {
    $page_type = NULL;
    if (is_array($form_state->getValues()['field_page_type'])) {
      $page_type = $form_state->getValues()['field_page_type'][0];
    }
    else {
      $page_type = $form_state->getValues()['field_page_type'];
    }
    if ($page_type == "22") {
      return $form;
    }
  }
  if (in_array($form['#id'], [
    'node-basic-page-form', 'node-basic-page-edit-form',
  ])) {
    $form['path']['widget'][0]['#open'] = TRUE;
    $form['path']['widget'][0]['pathauto']['#checked'] = FALSE;
    $form['path']['widget'][0]['alias']['#required'] = TRUE;
  }
  return $form;
}

/**
 * Helper function to check if node should be excluded from contact center based on path. Updates the exclude from url checkbox on edit pages.  */
function usa_twig_vars_check_exclude_from_contact_center(NodeInterface $node_to_check): void {
  $path_alias_to_check = $node_to_check->toUrl()->toString();
  if (str_starts_with($path_alias_to_check, '/es/articulos/') || str_starts_with($path_alias_to_check, '/features/')) {
    $node_to_check->set('field_exclude_from_contact_cente', 1);
    $node_to_check->save();
  }
}

/**
 * Helper function to get the node from a path. Used in path_alias_insert and path_alias_update.  */
function usa_twig_vars_get_node_from_path(PathAliasInterface $path): ?NodeInterface {
  $path_alias_url = $path->getAlias();
  $params = Url::fromUserInput($path_alias_url)->getRouteParameters();
  $entity_type_id = array_key_first($params);
  $node = \Drupal::entityTypeManager()->getStorage($entity_type_id)->load($params[$entity_type_id]);

  if ($node instanceof NodeInterface) {
    return $node;
  }

  return NULL;
}

/**
 * Implements hook_path_alias_update().
 *
 * When a user edits the url alias of a content page this is triggered to see
 * if the node should be excluded from the contact center. If so the value of
 * the exclude from contact center is set to 1.
 */
function usa_twig_vars_path_alias_update(PathAliasInterface $path): void {
  if ($node = usa_twig_vars_get_node_from_path($path)) {
    usa_twig_vars_check_exclude_from_contact_center($node);
  }
}

/**
 * Implements hook_node_insert().
 *
 * When a user creates a new content page this is triggered to see if the node
 * should be excluded from the contact center. If so the value of the exclude
 * from contact center is set to 1.
 */
function usa_twig_vars_node_insert(NodeInterface $node_to_check): void {
  usa_twig_vars_check_exclude_from_contact_center($node_to_check);
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array<string, mixed> $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function usa_twig_vars_preprocess_paragraph(&$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $lang = $lang_code = \Drupal::languageManager()->getCurrentLanguage();

  // Get the parent bundle.
  switch ($paragraph->getParagraphType()->id()) {
    case 'ceo_form':
      $labelMaker = new ElectedOfficialsLabels();
      $uspsErrors = $labelMaker->getUspsErrors($paragraph, $lang);
      $variables['ceoUSPSErrorsJSON'] = usa_twig_vars_json_encode($uspsErrors);
      break;

    case 'ceo_results':
      $labelMaker = new ElectedOfficialsLabels();
      $ceoLabels = $labelMaker->getResultsLabels($paragraph, $lang);
      $variables['ceoLabelsJSON'] = usa_twig_vars_json_encode($ceoLabels);
      break;

    case  'ceo_compose_email_form':
      $labelMaker = new ElectedOfficialsLabels();
      $ceoText = $labelMaker->getEmailLabels($paragraph, $lang);
      $variables['ceoTextJSON'] = usa_twig_vars_json_encode($ceoText);
      break;

    case 'site_issue_report_form':
      $labelMaker = new SiteIssueReportLabels();
      $variables['sirf'] = $labelMaker->getFormLabels($paragraph, $lang);

      // Massage the results page into a full URI for sf to redirect
      $variables['results_page_url'] = \Drupal::request()->getSchemeAndHttpHost()
        . $variables['content']['field_sirf_results_page'][0]['#url']->toString();
      break;

    case 'online_chat_button':
      $labelMaker = new ChatLabels();
      $chatLabels = $labelMaker->getLabels($paragraph, $lang);
      $variables['chatLabels'] = $chatLabels;
      break;
  }
}

/**
 * Helper for encoding JSON passed to twig for rendering.
 *
 * @param array<string, mixed> $payload
 */
function usa_twig_vars_json_encode(array $payload): string {
  return json_encode(
    $payload,
    JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES
  );
}
