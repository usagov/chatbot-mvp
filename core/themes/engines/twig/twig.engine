<?php

/**
 * @file
 * Handles integration of Twig templates with the Drupal theme system.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Markup;
use Twig\Error\RuntimeError;

/**
 * Implements hook_theme().
 */
function twig_theme($existing, $type, $theme, $path) {
  return drupal_find_theme_templates($existing, '.html.twig', $path);
}

/**
 * Implements hook_extension().
 */
function twig_extension() {
  return '.html.twig';
}

/**
 * Implements hook_render_template().
 */
function twig_render_template($template_file, array $variables) {
  /** @var \Twig\Environment $twig_service */
  $twig_service = \Drupal::service('twig');
  try {
    $rendered_markup = $twig_service->load($template_file)->render($variables);
  }
  catch (RuntimeError $e) {
    // In case there is a previous exception, re-throw the previous exception,
    // so that the original exception is shown, rather than
    // \Twig\Template::displayWithErrorHandling()'s exception.
    $previous_exception = $e->getPrevious();
    if ($previous_exception) {
      throw $previous_exception;
    }
    throw $e;
  }
  if ($twig_service->isDebug()) {
    $output = [
      'debug_prefix' => '',
      'debug_info' => '',
      'rendered_markup' => $rendered_markup,
      'debug_suffix' => '',
    ];

    $output['debug_prefix'] .= "\n\n<!-- THEME DEBUG -->";
    $output['debug_prefix'] .= "\n<!-- THEME HOOK: '" . Html::escape($variables['theme_hook_original']) . "' -->";
    // If there is only one template suggestion file, we don't output it, since
    // it would be somewhat redundant with the THEME HOOK above.
    if (count($variables['template_suggestions']) > 1) {
      $extension = twig_extension();
      $current_template = basename($template_file);
      $suggestions = $variables['template_suggestions'];
      foreach ($suggestions as &$suggestion) {
        if ($suggestion === $variables['template_suggestion']) {
          $suggestion = '‚úÖ ' . $current_template;
        }
        else {
          $suggestion = '‚ñ™Ô∏è ' . strtr($suggestion, '_', '-') . $extension;
        }

      }
      $output['debug_info'] .= "\n<!-- FILE NAME SUGGESTIONS:\n   " . Html::escape(implode("\n   ", $suggestions)) . "\n-->";
    }
    // Check if the template_file belongs to a custom theme
    $template_override_status_output = "BEGIN OUTPUT";
    $template_override_suffix_output = "END OUTPUT";
    if (str_starts_with($template_file, $variables['directory'])) {
      $template_override_status_output = "üí° BEGIN CUSTOM TEMPLATE OUTPUT";
      $template_override_suffix_output = "END CUSTOM TEMPLATE OUTPUT";
    }
    $output['debug_info']   .= "\n<!-- " . $template_override_status_output . " from '" . Html::escape($template_file) . "' -->\n";
    $output['debug_suffix'] .= "\n<!-- " . $template_override_suffix_output . " from '" . Html::escape($template_file) . "' -->\n\n";
    // This output has already been rendered and is therefore considered safe.
    return Markup::create(implode('', $output));
  }
  return Markup::create($rendered_markup);
}
